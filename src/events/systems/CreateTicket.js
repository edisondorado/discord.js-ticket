const fs = require('fs');
const { ChannelType, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require("discord.js");
const { DiscordServers, DiscordServersTicketBan } = require("../../models/model");

async function CreateTicket(interaction){
    const server = await DiscordServers.findOne({ guildId: interaction.guild.id })
    if (!server) return;
    
    const currentTimeInMillis = new Date().getTime();

    const hasBlock = await DiscordServersTicketBan.findOne({ guildId: interaction.guild.id, userId: interaction.member.id, expiresOn: { $gt: currentTimeInMillis } })
    if (hasBlock) return await interaction.reply({
        content: `\`[‚ùå] –£ –≤–∞—Å –∏–º–µ–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ç–∏–∫–µ—Ç–æ–≤!\`\n\n**–í—ã–¥–∞–ª:** <@${hasBlock.mod}>\n**–ü—Ä–∏—á–∏–Ω–∞:** ${hasBlock.reason}\n**–ò—Å—Ç–µ–∫–∞–µ—Ç:** <t:${Math.floor(hasBlock.expiresOn/1000)}:R>`,
        ephemeral: true
    })

    const typeButton = interaction.customId.split("_").pop();

    const thread = await interaction.channel.threads.create({
        name: `${typeButton} | ${interaction.member.user.username}`,
        autoArchiveDuration: 60,
        type: ChannelType.PrivateThread,
        reason: `Ticket from ${interaction.member.user.username}`,
        invitable: false
    });
    
    const embedThread = new EmbedBuilder()
        .setTitle("–û–∂–∏–¥–∞–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏")
        .setDescription("\`\`\`\n–î–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–∏–Ω—è–ª–∞—Å—å –∑–∞ –≤–∞—à —Ç–∏–∫–µ—Ç - –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ —Ä–∞—Å–ø–∏—Å–∞—Ç—å —Å—É—Ç—å –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã.\n\`\`\`")
        .setColor(0xffd817)
    
    await thread.send({
        content: "",
        embeds: [embedThread]
    })

    await interaction.reply({
        content: '`[‚úÖ] –¢–∏–∫–µ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!`\n`–¢–∏–∫–µ—Ç:` <#' + thread.id + '>',
        ephemeral: true
    });

    const embedLog = new EmbedBuilder()
        .setTitle("**üìå | –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç**")
        .setDescription(`**–ê–≤—Ç–æ—Ä:** ${interaction.member.id}\n**–¢–∏–ø —Ç–∏–∫–µ—Ç–∞:** ${typeButton}\n**–°–æ–∑–¥–∞–Ω:** <t:${currentTimeInMillis}>`)
        .setColor(0xffd817)
    
    const channel = interaction.guild.channels.cache.get(server.logChannel);
    if(!channel) return await interaction.reply({
        content: "\`[‚ùå] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞! –°–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –º–æ–¥–µ—Ä–∞—Ü–∏–∏.\`",
        ephemeral: true
    })

    const component = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId(`TakeTicket_${thread.id}`)
                .setLabel("–í–∑—è—Ç—å —Ç–∏–∫–µ—Ç")
                .setStyle(ButtonStyle.Secondary)
        )

    await channel.send({
        content: `<@&${server.supportId}>`,
        embeds: [embedLog],
        components: [component]
    })
        .then(async message => {
            await message.pin();
        })

    await thread.members.add(interaction.member.id);
    await thread.send(`<@${interaction.member.id}>`)
        .then(async message => {
            await message.delete()
        })
};

async function AcceptTicket(interaction) {
    const server = await DiscordServers.findOne({ guildId: interaction.guild.id })
    if (!server) return;

    const hasRole = await interaction.member.roles.cache.has(server.supportId)

    if(!hasRole) return;

    const threadId = interaction.customId.split("_").pop();

    const thread = await interaction.guild.channels.fetch(threadId);

    // const thread = channel.threads.cache.find(x => x.id === threadId);
    await thread.members.add(interaction.member.id);

    const messages = await thread.messages.fetch({ limit: 10 });
    const firstMessage = messages.find(message => message.position === 0);

    const embed = new EmbedBuilder(firstMessage.embeds[0]);

    const component = new ActionRowBuilder()
        .addComponents(
            new ButtonBuilder()
                .setCustomId(`CloseTicket_${thread.id}`)
                .setEmoji({name: "üîí"})
                .setLabel("–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç")
                .setStyle(ButtonStyle.Secondary)
        )

    embed.setTitle(`‚úÖ | –¢–∏–∫–µ—Ç —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç ${interaction.member.user.username}`);
    embed.setDescription(`–†–∞—Å–ø–∏—à–∏—Ç–µ —Å—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —Å–¥–µ–ª–∞–ª–∏ —ç—Ç–æ.\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.`)
    embed.setColor(0x00ff00)

    await firstMessage.edit({ embeds: [embed], components: [component] });

    const embedLog = new EmbedBuilder(interaction.message.embeds[0]);

    embedLog.addFields({ name: "–¢–∏–∫–µ—Ç –±—ã–ª –≤–∑—è—Ç:", value: `<@${interaction.member.id}>` })
    embedLog.setColor(0x00ff00)

    await interaction.message.edit({ embeds: [embedLog], components: [] })
        .then(async msg => {
            await msg.unpin()
        })
}

async function CloseTicket(interaction){
    const server = await DiscordServers.findOne({ guildId: interaction.guild.id })
    if (!server) return;

    const threadId = interaction.customId.split("_").pop();
    const thread = await interaction.guild.channels.fetch(threadId);

    const messages = await thread.messages.fetch();

    const fileName = `messages_${threadId}.txt`;
    let formattedMessages = '';

    messages.forEach(message => {
        if (!message.author.bot){
            formattedMessages += `${message.author.username}(${message.author.id}): ${message.content}\n`;
        }
    });

    fs.writeFileSync(fileName, formattedMessages);

    const channel = await interaction.guild.channels.fetch(server.logChannel);

    await channel.send({
        content: `\`[‚úÖ] –¢–∏–∫–µ—Ç \`<#${threadId}>\` –±—ã–ª –∑–∞–∫—Ä—ã—Ç.\``,
        files: [{
            attachment: fileName,
            name: `messages_${threadId}.txt`
        }]
    });

    fs.unlinkSync(fileName);

    const members = await thread.members.fetch();
    for (const [memberId, member] of members) {
        await thread.members.remove(memberId);
    }
    await thread.setLocked(true);
}

module.exports = { CreateTicket, AcceptTicket, CloseTicket };